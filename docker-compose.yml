x-logging:
  &default-logging
  options:
    max-size: "100k"
    max-file: "5"
  driver: json-file

services:
  ################################################################################
  # Traefik
  ################################################################################
  traefik:
    image: traefik:latest
    logging: *default-logging
    labels:
      # register authentik forward proxy middleware
      - traefik.http.middlewares.authentik.forwardAuth.address=http://172.17.0.1:9000/outpost.goauthentik.io/auth/traefik
      - traefik.http.middlewares.authentik.forwardAuth.trustForwardHeader=true
      - traefik.http.middlewares.authentik.forwardAuth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version
      # enable traefik dashboard using authentik middleware
      - traefik.enable=${TRAEFIK_API_ENABLE:-false}
      - traefik.http.routers.api.middlewares=authentik
      - traefik.http.routers.api.rule=Host(`traefik.${CF_DOMAIN}`)
      - traefik.http.routers.api.service=api@internal
      - traefik.http.services.api.loadBalancer.server.port=80 # dummy port required in host mode
    environment:
      CF_API_KEY: ${CF_API_TOKEN}
      CF_API_EMAIL: ${CF_API_EMAIL}
    command:
      # act as a reverse proxy for docker containers with label "traefik.enable=true"
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      # enable stdout access log
      - --accessLog=true
      # enable traefik dashboard
      - --api.dashboard=${TRAEFIK_API_ENABLE:-false}
      # listen addresses
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443
      # trust cloudflare forwarded headers (https://www.cloudflare.com/ips-v4)
      - --entryPoints.web.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.websecure.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      # redirect http to https
      - --entryPoints.web.http.redirections.entryPoint.to=websecure
      - --entryPoints.web.http.redirections.entryPoint.scheme=https
      # configure letsencrypt acme
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge=true
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.letsencrypt.acme.email=${CF_API_EMAIL}
      - --certificatesResolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json
      # configure letsencrypt default certificate
      - --entryPoints.websecure.http.tls.certResolver=letsencrypt
      - --entryPoints.websecure.http.tls.domains[0].main=${CF_DOMAIN}
      - --entryPoints.websecure.http.tls.domains[0].sans=*.${CF_DOMAIN}
      # trust insecure certificates
      - --serversTransport.insecureSkipVerify=true
      # opt out of usage statistics
      - --global.sendAnonymousUsage=false
    network_mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./volumes/traefik/acme:/etc/traefik/acme
    restart: unless-stopped

  cloudflare:
    image: tiredofit/traefik-cloudflare-companion
    logging: *default-logging
    environment:
      CONTAINER_ENABLE_MONITORING: "false"
      CF_EMAIL: ${CF_API_EMAIL}
      CF_TOKEN: ${CF_API_TOKEN}
      DOMAIN1: ${CF_DOMAIN}
      DOMAIN1_PROXIED: ${CF_DOMAIN_PROXIED:-true}
      DOMAIN1_ZONE_ID: ${CF_ZONE_ID}
      TARGET_DOMAIN: ${CF_TARGET:-CF_DOMAIN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - traefik
    restart: unless-stopped


  ################################################################################
  # authentik
  ################################################################################
  authentik_server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.5.1}
    logging: *default-logging
    labels:
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_default
      - traefik.enable=true
      - traefik.http.routers.authentik.rule=Host(`auth.${CF_DOMAIN}`)
      - traefik.http.services.authentik.loadBalancer.server.port=9000
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY?:authentik secret key required}
      AUTHENTIK_POSTGRESQL__HOST: authentik_postgresql
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_POSTGRESQL_USER:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_POSTGRESQL_PASSWORD:?database password required}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_POSTGRESQL_NAME:-authentik}
      AUTHENTIK_REDIS__HOST: authentik_redis
      AUTHENTIK_EMAIL__HOST: ${AUTHENTIK_EMAIL_HOST:-localhost}
      AUTHENTIK_EMAIL__PORT: ${AUTHENTIK_EMAIL_PORT:-25}
      AUTHENTIK_EMAIL__FROM: ${AUTHENTIK_EMAIL_FROM:-authentik@$CF_DOMAIN}
      AUTHENTIK_EMAIL__USERNAME: ${AUTHENTIK_EMAIL_USERNAME:-}
      AUTHENTIK_EMAIL__PASSWORD: ${AUTHENTIK_EMAIL_PASSWORD:-}
      AUTHENTIK_EMAIL__TIMEOUT: ${AUTHENTIK_EMAIL_TIMEOUT:-10}
      AUTHENTIK_EMAIL__USE_SSL: ${AUTHENTIK_EMAIL_USE_SSL:-false}
      AUTHENTIK_EMAIL__USE_TLS: ${AUTHENTIK_EMAIL_USE_TLS:-false}
    command: server
    networks:
      - authentik_backend
      - default
    ports:
      - 172.17.0.1:9000:9000
    volumes:
      - ./volumes/authentik/media:/media
      - ./volumes/authentik/templates:/templates
    depends_on:
      - authentik_worker
    restart: unless-stopped

  authentik_worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.5.1}
    logging: *default-logging
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY?:authentik secret key required}
      AUTHENTIK_POSTGRESQL__HOST: authentik_postgresql
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_POSTGRESQL_NAME:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_POSTGRESQL_PASSWORD:?database password required}
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_POSTGRESQL_USER:-authentik}
      AUTHENTIK_REDIS__HOST: authentik_redis
      AUTHENTIK_EMAIL__HOST: ${AUTHENTIK_EMAIL_HOST:-localhost}
      AUTHENTIK_EMAIL__PORT: ${AUTHENTIK_EMAIL_PORT:-25}
      AUTHENTIK_EMAIL__FROM: ${AUTHENTIK_EMAIL_FROM:-authentik@$CF_DOMAIN}
      AUTHENTIK_EMAIL__USERNAME: ${AUTHENTIK_EMAIL_USERNAME:-}
      AUTHENTIK_EMAIL__PASSWORD: ${AUTHENTIK_EMAIL_PASSWORD:-}
      AUTHENTIK_EMAIL__TIMEOUT: ${AUTHENTIK_EMAIL_TIMEOUT:-10}
      AUTHENTIK_EMAIL__USE_SSL: ${AUTHENTIK_EMAIL_USE_SSL:-false}
      AUTHENTIK_EMAIL__USE_TLS: ${AUTHENTIK_EMAIL_USE_TLS:-false}
    command: worker
    user: root
    networks:
      - authentik_backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./volumes/authentik/certs:/certs
      - ./volumes/authentik/media:/media
      - ./volumes/authentik/templates:/templates
    depends_on:
      - authentik_postgresql
      - authentik_redis
    restart: unless-stopped

  authentik_postgresql:
    image: docker.io/library/postgres:12-alpine
    logging: *default-logging
    environment:
      POSTGRES_USER: ${AUTHENTIK_POSTGRESQL_USER:-authentik}
      POSTGRES_PASSWORD: ${AUTHENTIK_POSTGRESQL_PASSWORD:?database password required}
      POSTGRES_DB: ${AUTHENTIK_POSTGRESQL_NAME:-authentik}
    networks:
      - authentik_backend
    volumes:
      - authentik_postgresql:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    restart: unless-stopped

  authentik_redis:
    image: docker.io/library/redis:alpine
    logging: *default-logging
    command: --save 60 1 --loglevel warning
    networks:
      - authentik_backend
    volumes:
      - authentik_redis:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    restart: unless-stopped


  ################################################################################
  # Portainer
  ################################################################################
  portainer:
    image: ${PORTAINER_IMAGE:-portainer/portainer-ce}
    logging: *default-logging
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(`portainer.${CF_DOMAIN}`)
      - traefik.http.services.portainer.loadBalancer.server.port=9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./volumes/portainer/data:/data
    restart: unless-stopped


  ################################################################################
  # Gitea
  ################################################################################
  gitea:
    image: gitea/gitea
    logging: *default-logging
    labels:
      - traefik.enable=true
      - traefik.http.routers.gitea.rule=Host(`git.${CF_DOMAIN}`)
      - traefik.http.services.gitea.loadBalancer.server.port=3000
    environment:
      USER_UID: ${PUID:-1000}
      USER_GID: ${PGID:-1000}
      GITEA__database__DB_TYPE: mysql
      GITEA__database__HOST: gitea_mysql:3306
      GITEA__database__NAME: gitea
      GITEA__database__USER: gitea
      GITEA__database__PASSWD: ${GITEA_MYSQL_PASSWORD}
    networks:
      - gitea_backend
      - default
    ports:
      - ${GITEA_SSH_PORT:-2222}:22
    volumes:
      - ./volumes/gitea/data:/data
    depends_on:
      - gitea_mysql
    restart: unless-stopped

  gitea_mysql:
    image: mysql:8
    logging: *default-logging
    environment:
      MYSQL_ROOT_PASSWORD: ${GITEA_MYSQL_ROOT_PASSWORD}
      MYSQL_USER: gitea
      MYSQL_PASSWORD: ${GITEA_MYSQL_PASSWORD}
      MYSQL_DATABASE: gitea
    networks:
      - gitea_backend
    volumes:
      - gitea_mysql:/var/lib/mysql
    restart: unless-stopped

  gitea_runner:
    image: gitea/act_runner
    logging: *default-logging
    environment:
      CONFIG_FILE: /config.yaml
      GITEA_INSTANCE_URL: https://git.${CF_DOMAIN}
      GITEA_RUNNER_REGISTRATION_TOKEN: ${GITEA_RUNNER_REGISTRATION_TOKEN}
    networks:
      - gitea_backend
    ports:
      - 8088:8088
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./volumes/gitea_runner/config/config.yaml:/config.yaml
      - ./volumes/gitea_runner/data:/data

  ################################################################################
  # Jenkins
  ################################################################################
  jenkins:
    build: ./services/jenkins
    logging: *default-logging
    labels:
      - traefik.enable=true
      - traefik.http.routers.jenkins.rule=Host(`jenkins.${CF_DOMAIN}`)
      - traefik.http.services.jenkins.loadBalancer.server.port=8080
    environment:
      TINI_SUBREAPER: ""
    init: true
    ports:
      - 50000:50000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./volumes/jenkins/jenkins_home:/var/jenkins_home
    restart: unless-stopped


  ################################################################################
  # BookStack
  ################################################################################
  bookstack:
    image: lscr.io/linuxserver/bookstack
    logging: *default-logging
    labels:
      - traefik.enable=true
      - traefik.http.routers.bookstack.rule=Host(`wiki.${CF_DOMAIN}`)
      - traefik.http.services.bookstack.loadBalancer.server.port=80
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      APP_URL: https://wiki.${CF_DOMAIN}
      DB_HOST: bookstack_mysql
      DB_USER: bookstack
      DB_PASS: ${BOOKSTACK_MYSQL_PASSWORD}
      DB_DATABASE: bookstackapp
    networks:
      - bookstack_backend
      - default
    volumes:
      - ./volumes/bookstack/config:/config
    depends_on:
      - bookstack_mysql
    restart: unless-stopped

  bookstack_mysql:
    image: lscr.io/linuxserver/mariadb
    logging: *default-logging
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      MYSQL_ROOT_PASSWORD: ${BOOKSTACK_MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: bookstackapp
      MYSQL_USER: bookstack
      MYSQL_PASSWORD: ${BOOKSTACK_MYSQL_PASSWORD}
    networks:
      - bookstack_backend
    volumes:
      - bookstack_mysql:/config
    restart: unless-stopped


  ################################################################################
  # Netdata
  ################################################################################
  netdata:
    image: netdata/netdata:stable
    logging: *default-logging
    hostname: netdata.${CF_DOMAIN}
    labels:
      - traefik.enable=true
      - traefik.http.routers.netdata.middlewares=authentik
      - traefik.http.routers.netdata.rule=Host(`netdata.${CF_DOMAIN}`)
      - traefik.http.services.netdata.loadBalancer.server.port=19999
    pid: host
    cap_add:
      - SYS_ADMIN
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    environment:
      NETDATA_EXTRA_APK_PACKAGES: libvirt-daemon msmtp
    volumes:
      - /etc/group:/host/etc/group:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /etc/passwd:/host/etc/passwd:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./volumes/netdata/cache:/var/cache/netdata
      - ./volumes/netdata/config:/etc/netdata
      - ./volumes/netdata/lib:/var/lib/netdata
    restart: unless-stopped

networks:
  authentik_backend:
  gitea_backend:
  bookstack_backend:

volumes:
  authentik_postgresql:
  authentik_redis:
  gitea_mysql:
  bookstack_mysql:
